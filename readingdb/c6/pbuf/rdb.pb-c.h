/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_rdb_2eproto__INCLUDED
#define PROTOBUF_C_rdb_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Reading Reading;
typedef struct _ReadingSet ReadingSet;
typedef struct _DatabaseDelta DatabaseDelta;
typedef struct _DatabaseRecord DatabaseRecord;
typedef struct _Query Query;
typedef struct _Nearest Nearest;
typedef struct _Delete Delete;
typedef struct _Response Response;


/* --- enums --- */

typedef enum _Nearest__Direction {
  NEAREST__DIRECTION__NEXT = 1,
  NEAREST__DIRECTION__PREV = 2
} Nearest__Direction;
typedef enum _Response__ErrorCode {
  RESPONSE__ERROR_CODE__OK = 1,
  RESPONSE__ERROR_CODE__FAIL = 2,
  RESPONSE__ERROR_CODE__FAIL_PARAM = 3,
  RESPONSE__ERROR_CODE__FAIL_MEM = 4
} Response__ErrorCode;
typedef enum _MessageType {
  MESSAGE_TYPE__QUERY = 1,
  MESSAGE_TYPE__READINGSET = 2,
  MESSAGE_TYPE__RESPONSE = 3,
  MESSAGE_TYPE__NEAREST = 4,
  MESSAGE_TYPE__DELETE = 5
} MessageType;

/* --- messages --- */

struct  _Reading
{
  ProtobufCMessage base;
  uint32_t timestamp;
  double value;
  protobuf_c_boolean has_seqno;
  uint32_t seqno;
  protobuf_c_boolean has_min;
  double min;
  protobuf_c_boolean has_max;
  double max;
};
#define READING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reading__descriptor) \
    , 0, 0, 0,0, 0,0, 0,0 }


struct  _ReadingSet
{
  ProtobufCMessage base;
  uint32_t streamid;
  uint32_t substream;
  size_t n_data;
  Reading **data;
};
#define READING_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reading_set__descriptor) \
    , 0, 0, 0,NULL }


struct  _DatabaseDelta
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  int32_t timestamp;
  protobuf_c_boolean has_value;
  int64_t value;
  protobuf_c_boolean has_seqno;
  int32_t seqno;
  protobuf_c_boolean has_min_delta;
  int64_t min_delta;
  protobuf_c_boolean has_max_delta;
  int64_t max_delta;
  protobuf_c_boolean has_min;
  double min;
  protobuf_c_boolean has_max;
  double max;
};
#define DATABASE_DELTA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&database_delta__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _DatabaseRecord
{
  ProtobufCMessage base;
  uint32_t period_length;
  Reading *first;
  size_t n_deltas;
  DatabaseDelta **deltas;
};
#define DATABASE_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&database_record__descriptor) \
    , 0, NULL, 0,NULL }


struct  _Query
{
  ProtobufCMessage base;
  uint32_t streamid;
  uint32_t substream;
  uint32_t starttime;
  uint32_t endtime;
  protobuf_c_boolean has_action;
  uint32_t action;
};
#define QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&query__descriptor) \
    , 0, 0, 0, 0, 0,0 }


struct  _Nearest
{
  ProtobufCMessage base;
  uint32_t streamid;
  uint32_t substream;
  uint32_t reference;
  Nearest__Direction direction;
  protobuf_c_boolean has_n;
  uint32_t n;
};
#define NEAREST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nearest__descriptor) \
    , 0, 0, 0, 0, 0,0 }


struct  _Delete
{
  ProtobufCMessage base;
  uint32_t streamid;
  uint32_t substream;
  uint64_t starttime;
  uint64_t endtime;
};
#define DELETE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete__descriptor) \
    , 0, 0, 0, 0 }


struct  _Response
{
  ProtobufCMessage base;
  Response__ErrorCode error;
  ReadingSet *data;
};
#define RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response__descriptor) \
    , 0, NULL }


/* Reading methods */
void   reading__init
                     (Reading         *message);
size_t reading__get_packed_size
                     (const Reading   *message);
size_t reading__pack
                     (const Reading   *message,
                      uint8_t             *out);
size_t reading__pack_to_buffer
                     (const Reading   *message,
                      ProtobufCBuffer     *buffer);
Reading *
       reading__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reading__free_unpacked
                     (Reading *message,
                      ProtobufCAllocator *allocator);
/* ReadingSet methods */
void   reading_set__init
                     (ReadingSet         *message);
size_t reading_set__get_packed_size
                     (const ReadingSet   *message);
size_t reading_set__pack
                     (const ReadingSet   *message,
                      uint8_t             *out);
size_t reading_set__pack_to_buffer
                     (const ReadingSet   *message,
                      ProtobufCBuffer     *buffer);
ReadingSet *
       reading_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reading_set__free_unpacked
                     (ReadingSet *message,
                      ProtobufCAllocator *allocator);
/* DatabaseDelta methods */
void   database_delta__init
                     (DatabaseDelta         *message);
size_t database_delta__get_packed_size
                     (const DatabaseDelta   *message);
size_t database_delta__pack
                     (const DatabaseDelta   *message,
                      uint8_t             *out);
size_t database_delta__pack_to_buffer
                     (const DatabaseDelta   *message,
                      ProtobufCBuffer     *buffer);
DatabaseDelta *
       database_delta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   database_delta__free_unpacked
                     (DatabaseDelta *message,
                      ProtobufCAllocator *allocator);
/* DatabaseRecord methods */
void   database_record__init
                     (DatabaseRecord         *message);
size_t database_record__get_packed_size
                     (const DatabaseRecord   *message);
size_t database_record__pack
                     (const DatabaseRecord   *message,
                      uint8_t             *out);
size_t database_record__pack_to_buffer
                     (const DatabaseRecord   *message,
                      ProtobufCBuffer     *buffer);
DatabaseRecord *
       database_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   database_record__free_unpacked
                     (DatabaseRecord *message,
                      ProtobufCAllocator *allocator);
/* Query methods */
void   query__init
                     (Query         *message);
size_t query__get_packed_size
                     (const Query   *message);
size_t query__pack
                     (const Query   *message,
                      uint8_t             *out);
size_t query__pack_to_buffer
                     (const Query   *message,
                      ProtobufCBuffer     *buffer);
Query *
       query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   query__free_unpacked
                     (Query *message,
                      ProtobufCAllocator *allocator);
/* Nearest methods */
void   nearest__init
                     (Nearest         *message);
size_t nearest__get_packed_size
                     (const Nearest   *message);
size_t nearest__pack
                     (const Nearest   *message,
                      uint8_t             *out);
size_t nearest__pack_to_buffer
                     (const Nearest   *message,
                      ProtobufCBuffer     *buffer);
Nearest *
       nearest__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nearest__free_unpacked
                     (Nearest *message,
                      ProtobufCAllocator *allocator);
/* Delete methods */
void   delete__init
                     (Delete         *message);
size_t delete__get_packed_size
                     (const Delete   *message);
size_t delete__pack
                     (const Delete   *message,
                      uint8_t             *out);
size_t delete__pack_to_buffer
                     (const Delete   *message,
                      ProtobufCBuffer     *buffer);
Delete *
       delete__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete__free_unpacked
                     (Delete *message,
                      ProtobufCAllocator *allocator);
/* Response methods */
void   response__init
                     (Response         *message);
size_t response__get_packed_size
                     (const Response   *message);
size_t response__pack
                     (const Response   *message,
                      uint8_t             *out);
size_t response__pack_to_buffer
                     (const Response   *message,
                      ProtobufCBuffer     *buffer);
Response *
       response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response__free_unpacked
                     (Response *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Reading_Closure)
                 (const Reading *message,
                  void *closure_data);
typedef void (*ReadingSet_Closure)
                 (const ReadingSet *message,
                  void *closure_data);
typedef void (*DatabaseDelta_Closure)
                 (const DatabaseDelta *message,
                  void *closure_data);
typedef void (*DatabaseRecord_Closure)
                 (const DatabaseRecord *message,
                  void *closure_data);
typedef void (*Query_Closure)
                 (const Query *message,
                  void *closure_data);
typedef void (*Nearest_Closure)
                 (const Nearest *message,
                  void *closure_data);
typedef void (*Delete_Closure)
                 (const Delete *message,
                  void *closure_data);
typedef void (*Response_Closure)
                 (const Response *message,
                  void *closure_data);

/* --- services --- */

typedef struct _ReadingDB_Service ReadingDB_Service;
struct _ReadingDB_Service
{
  ProtobufCService base;
  void (*ask)(ReadingDB_Service *service,
              const Query *input,
              Response_Closure closure,
              void *closure_data);
  void (*tell)(ReadingDB_Service *service,
               const ReadingSet *input,
               Response_Closure closure,
               void *closure_data);
  void (*iter)(ReadingDB_Service *service,
               const Nearest *input,
               Response_Closure closure,
               void *closure_data);
};
typedef void (*ReadingDB_ServiceDestroy)(ReadingDB_Service *);
void reading_db__init (ReadingDB_Service *service,
                       ReadingDB_ServiceDestroy destroy);
#define READING_DB__BASE_INIT \
    { &reading_db__descriptor, protobuf_c_service_invoke_internal, NULL }
#define READING_DB__INIT(function_prefix__) \
    { READING_DB__BASE_INIT,\
      function_prefix__ ## ask,\
      function_prefix__ ## tell,\
      function_prefix__ ## iter  }
void reading_db__ask(ProtobufCService *service,
                     const Query *input,
                     Response_Closure closure,
                     void *closure_data);
void reading_db__tell(ProtobufCService *service,
                      const ReadingSet *input,
                      Response_Closure closure,
                      void *closure_data);
void reading_db__iter(ProtobufCService *service,
                      const Nearest *input,
                      Response_Closure closure,
                      void *closure_data);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    message_type__descriptor;
extern const ProtobufCMessageDescriptor reading__descriptor;
extern const ProtobufCMessageDescriptor reading_set__descriptor;
extern const ProtobufCMessageDescriptor database_delta__descriptor;
extern const ProtobufCMessageDescriptor database_record__descriptor;
extern const ProtobufCMessageDescriptor query__descriptor;
extern const ProtobufCMessageDescriptor nearest__descriptor;
extern const ProtobufCEnumDescriptor    nearest__direction__descriptor;
extern const ProtobufCMessageDescriptor delete__descriptor;
extern const ProtobufCMessageDescriptor response__descriptor;
extern const ProtobufCEnumDescriptor    response__error_code__descriptor;
extern const ProtobufCServiceDescriptor reading_db__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_rdb_2eproto__INCLUDED */
